filetype: prql
detect:
    filename: "\\.prql$"
rules:
    - statement: "\\b(let|module)\\b"
    - type: "\\b(u?int(8|16|32|64)?|float(32|64)|bool|text|date|time|timestamp)\\b"
    - type.keyword: "\\b(enum)\\b"
    - constant.bool: "\\b(true|false|null|this|that)\\b"
    - identifier: "\\b(abs|floor|ceil|pi|exp|ln|log10|log|sqrt|degrees|radians|cos|acos|sin|asin|tan|atan|pow|round)\\b"
    - identifier: "\\b(min|max|sum|average|stddev|all|any|concat_array|count)\\b"
    - identifier: "\\b(lag|lead|first|last|rank|rank_dense|row_number)\\b"
    - identifier: "\\b(tuple_every|tuple_map|tuple_zip|_eq|_is_null)\\b"
    - identifier: "\\b(as|in|from_text)\\b"
    - identifier: "\\b(lower|upper|ltrim|rtrim|trim|length|extract|replace|starts_with|contains|ends_with)\\b"
    - identifier: "\\b(to_text)\\b"
    - identifier: "\\b(read_parquet|read_csv)\\b"
    - identifier.class: "\\b(math|text|date|prql)\\b"
    - statement: "\\b(aggregate|derive|filter|from|group|join|select|sort|take|window)\\b"
    - symbol.operator: "([~^.:;,+*|=!\\%@]|<|>|/|-|&)"
    - symbol.brackets: "(\\{|\\})"
    - symbol.brackets: "(\\(|\\))"
    - symbol.brackets: "(\\[|\\])"
    - constant.number: "\\b[0-9](_?[0-9])*(\\.([0-9](_?[0-9])*)?)?(e[0-9](_?[0-9])*)?\\b"
    - constant.number: "\\b0b(_?[01])+\\b"
    - constant.number: "\\b0o(_?[0-7])+\\b"
    - constant.number: "\\b0x(_?[0-9a-fA-F])+\\b"
    - constant: "\\b[0-9]+(years|months|weeks|days|hours|minutes|seconds|milliseconds|microseconds)\\b"
    - constant.string:
        start: "[frs]?\""
        end: "\""
        skip: "\\\\."
        rules:
            - constant.specialChar: "\\\\[bfnrt'\\\"\\\\]"
            - constant.specialChar: "\\\\([0-7]{3}|x[A-Fa-f0-9]{2}|u{[0-9A-Fa-f]{1,6}})"
    - constant.string:
        start: "[frs]?'"
        end: "'"
        skip: "\\\\."
        rules:
            - constant.specialChar: "\\\\."
            - constant.specialChar: "\\\\([0-7]{3}|x[A-Fa-f0-9]{2}|u{[0-9A-Fa-f]{1,6}})"
    - comment:
        start: "#"
        end: "$"
        rules:
            - todo: "(TODO|FIXME|NOTE):?"
    - preproc: "@\\{([a-z]+(=[a-z0-9]+,?)?)*\\}"