filetype: julia
detect:
    filename: "\\.jl$"
    header: "^#!.*/(env +)?julia( |$)"
rules:
    - constant.bool: "\\b(true|false)\\b"
    - constant: "\\b(nothing|missing)\\b"
    - constant: "__[A-Za-z0-9_]+__"
    - identifier: "[A-Za-z_][A-Za-z0-9_]*[[:space:]]*[(]"
    - statement: "\\b(baremodule|begin|break|catch|const|continue|do|else|elseif|end|export|finally|for|function|global|if|import|let|local|macro|module|public|quote|return|struct|try|using|while)\\b"
    - statement: "\\b(abstract\\s+type|primitive\\s+type|mutable\\s+struct)\\b"
    - identifier.macro: "@[A-Za-z0-9_]+"
    - symbol.operator: "[:+*|=!%~<>/\\-?&\\\\÷∈∉∘]|\\b(in|isa|where)\\b"
    - symbol.operator: "\\^"
    - symbol.brackets: "([(){}]|\\[|\\])"
    - constant.number: "\\b([0-9]+(_[0-9]+)*|0x[0-9a-fA-F]+(_[0-9a-fA-F]+)*|0b[01]+(_[01]+)*|0o[0-7]+(_[0-7]+)*|Inf(16|32|64)?|NaN(16|32|64)?)\\b"
    - constant.string:
        start: "\"\"\""
        end: "\"\"\""
        rules: []
    - constant.string:
        start: "\""
        end: "\""
        skip: "\\\\."
        rules:
            - constant.specialChar: "\\\\([\"'abfnrtv\\\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{1,4}|U[0-9A-Fa-f]{1,8})"
    - constant.string: "'(\\\\.|.)'"
    - constant.string:
        start: "'\""
        end: "'"
        rules: []
    - comment:
        start: "#="
        end: "=#"
        rules: []
    - comment:
        start: "#"
        end: "$"
        rules: []